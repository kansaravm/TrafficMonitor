// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrafficMonitor.Common;

#nullable disable

namespace TrafficMonitor.Common.Migrations
{
    [DbContext(typeof(TrafficMonitorDataContext))]
    [Migration("20240908162707_SeedTrafficData")]
    partial class SeedTrafficData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrafficMonitor.Common.Models.EagleBot", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("EagleBot", (string)null);
                });

            modelBuilder.Entity("TrafficMonitor.Common.Models.TrafficData", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Direction")
                        .HasColumnType("text");

                    b.Property<Guid>("EagleBotId")
                        .HasColumnType("uuid");

                    b.Property<double?>("FlowRate")
                        .HasColumnType("double precision");

                    b.Property<string>("RoadName")
                        .HasColumnType("text");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<double?>("VehicleSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("TrafficData", (string)null);
                });

            modelBuilder.Entity("TrafficMonitor.Common.Models.TrafficData", b =>
                {
                    b.OwnsOne("Coordinate", "Location", b1 =>
                        {
                            b1.Property<Guid>("TrafficDataId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.HasKey("TrafficDataId");

                            b1.ToTable("TrafficData");

                            b1.WithOwner()
                                .HasForeignKey("TrafficDataId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
