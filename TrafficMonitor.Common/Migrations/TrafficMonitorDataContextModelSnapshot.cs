// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrafficMonitor.Common;

#nullable disable

namespace TrafficMonitor.Common.Migrations
{
    [DbContext(typeof(TrafficMonitorDataContext))]
    partial class TrafficMonitorDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrafficMonitor.Common.Models.EagleBot", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("EagleBot", (string)null);
                });

            modelBuilder.Entity("TrafficMonitor.Common.Models.TrafficData", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Direction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EagleBotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("FlowRate")
                        .HasColumnType("float");

                    b.Property<string>("RoadName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double?>("VehicleSpeed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EagleBotId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("TrafficData", (string)null);
                });

            modelBuilder.Entity("TrafficMonitor.Common.Models.TrafficData", b =>
                {
                    b.HasOne("TrafficMonitor.Common.Models.EagleBot", "EagleBot")
                        .WithMany()
                        .HasForeignKey("EagleBotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TrafficMonitor.Common.Models.TrafficData.Location#Coordinate", "Location", b1 =>
                        {
                            b1.Property<Guid>("TrafficDataId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("TrafficDataId");

                            b1.ToTable("TrafficData", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TrafficDataId");
                        });

                    b.Navigation("EagleBot");

                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
